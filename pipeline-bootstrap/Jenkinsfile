pipeline {
    agent any

    environment {
        TOFU_DIR = 'pipeline-bootstrap/tofu'
        KUBECONFIG_CREDS_ID = 'jenkins-kubeconfig'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Tofu Init') {
            steps {
                dir("${TOFU_DIR}") {
                    sh 'tofu init'
                }
            }
        }

        stage('Tofu Plan') {
            steps {
                withCredentials([file(credentialsId: env.KUBECONFIG_CREDS_ID, variable: 'KUBECONFIG_PATH')]) {
                    dir("${TOFU_DIR}") {
                        sh '''
                            echo "Kubeconfig file path: ${KUBECONFIG_PATH}"
                            echo "Checking if kubeconfig file exists:"
                            ls -la "${KUBECONFIG_PATH}"
                            echo "Content of kubeconfig:"
                            cat "${KUBECONFIG_PATH}"
                            echo "Testing kubectl access:"
                            kubectl --kubeconfig="${KUBECONFIG_PATH}" cluster-info
                        '''
                        sh 'tofu plan -var="kubeconfig_path=${KUBECONFIG_PATH}" -out=tfplan'
                    }
                }
            }
        }

        stage('Tofu Apply') {
            steps {
                withCredentials([file(credentialsId: env.KUBECONFIG_CREDS_ID, variable: 'KUBECONFIG_PATH')]) {
                    script {
                        try {
                            dir("${TOFU_DIR}") {
                                // Store current state before applying
                                sh 'tofu state pull > pre_apply_state.json || true'

                                // Apply changes
                                sh 'tofu apply -auto-approve tfplan'
                            }
                        } catch (Exception e) {
                            echo "Apply failed: ${e.getMessage()}"
                            currentBuild.result = 'FAILURE'
                            error("Tofu apply failed, triggering rollback")
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                echo "Pipeline failed, attempting rollback..."
                withCredentials([file(credentialsId: env.KUBECONFIG_CREDS_ID, variable: 'KUBECONFIG_PATH')]) {
                    dir("${TOFU_DIR}") {
                        try {
                            // Attempt to destroy what was created
                            sh 'tofu destroy -auto-approve -var="kubeconfig_path=${KUBECONFIG_PATH}" || true'
                            echo "Rollback completed - all resources destroyed"
                        } catch (Exception rollbackError) {
                            echo "Rollback failed: ${rollbackError.getMessage()}"
                            echo "Manual cleanup may be required"
                        }
                    }
                }
            }
        }
        always {
            dir("${TOFU_DIR}") {
                // Clean up temporary files
                sh 'rm -f tfplan pre_apply_state.json || true'
            }
        }
    }
}
